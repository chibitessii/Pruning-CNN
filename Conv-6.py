                conv1 = convolution2d(images, 12, [11, 11], [4, 4], padding='VALID', biases_initializer=tf.constant_initializer(0.), scope='conv1')
                pool1 = max_pool2d(conv1, 3, 2, padding='VALID', scope='pool1')
                conv2 = convolution2d(pool1, 24, [9, 9], [1, 1], padding='SAME', scope='conv2') 
                pool2 = max_pool2d(conv2, 3, 2, padding='SAME', scope='pool2')
                conv3 = convolution2d(pool2, 48, [7, 7], [1, 1], padding='SAME', biases_initializer=tf.constant_initializer(0.), scope='conv3')
                pool3 = max_pool2d(conv3, 3, 2, padding='SAME', scope='pool3')
                conv4 = convolution2d(pool3, 96, [5, 5], [1, 1], padding='SAME', biases_initializer=tf.constant_initializer(0.), scope='conv4')
                pool4 = max_pool2d(conv4, 3, 2, padding='SAME', scope='pool4')
                conv5 = convolution2d(pool4, 192, [3, 3], [1, 1], padding='SAME', biases_initializer=tf.constant_initializer(0.), scope='conv5')
                pool5 = max_pool2d(conv5, 3, 2, padding='SAME', scope='pool5')
                conv6 = convolution2d(pool5, 384, [1, 1], [1, 1], padding='SAME', biases_initializer=tf.constant_initializer(0.), scope='conv6')
                pool6 = max_pool2d(conv6, 3, 2, padding='SAME', scope='pool6')
                # can use tf.contrib.layer.flatten
                flat = tf.reshape(pool6, [-1, 384*1*1], name='reshape')
                full1 = fully_connected(flat, 512, scope='full1')
                drop1 = tf.nn.dropout(full1, pkeep, name='drop1')
                full2 = fully_connected(drop1, 512, scope='full2')
                drop2 = tf.nn.dropout(full2, pkeep, name='drop2')
